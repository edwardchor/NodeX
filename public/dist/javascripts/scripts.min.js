function touchFix(e){if(!("clientX"in e||"clientY"in e)){var t=e.touches||e.originalEvent.touches;t&&t.length&&(e.clientX=t[0].clientX,e.clientY=t[0].clientY),e.preventDefault()}}function getPreviousSibling(e){if(e=e[0],e.previousElementSibling)return angular.element(e.previousElementSibling);for(var t=e.previousSibling;null!=t&&1!=t.nodeType;)t=t.previousSibling;return angular.element(t)}function insertElementBefore(e,t){var n=getPreviousSibling(e);n.length>0?n.after(t):e.parent().prepend(t)}function elementMatchesSelector(e,t){if(e instanceof angular.element&&(e=e[0]),null!==matchingFunction)return e[matchingFunction](t)}angular.module("NodeX",["ngRoute","ui.router","ngMaterial","ngAnimate"]).controller("MainController",function(){}),angular.module("NodeX").constant("config",{backendUrlPrefix:"/api"}),angular.module("NodeX").config(["$urlRouterProvider","$stateProvider",function(e,t){t.state("funku",{templateUrl:"views/FunkU.html",controller:"FunkUController"}).state("canvas",{templateUrl:"views/canvas.html",controller:"CanvasController"}).state("ui",{templateUrl:"views/ui.html",controller:"UIController"}).state("animation",{templateUrl:"views/animation.html",controller:"FlashController"}).state("paper",{templateUrl:"views/paper.html",controller:"PaperController"}),e.otherwise("/")}]),angular.module("NodeX").controller("CanvasController",["$scope",function(e){function t(){l.fillStyle="white",l.fillRect(0,0,i,a),s=100+Math.round(50*Math.random()),c=10+Math.round(50*Math.random()),d=Math.round(50+20*Math.random())/100,u=10;var e={x:i/2,y:s+50,angle:90};m=[],m.push(e),l.beginPath(),l.moveTo(e.x,a-50),l.lineTo(e.x,a-e.y),l.strokeStyle="brown",l.lineWidth=u,l.stroke(),n()}function n(){s*=d,u*=d,l.lineWidth=u;var e=[];l.beginPath();for(var r=0;r<m.length;r++){var i=m[r],h=o(i.x,i.y,i.angle+c,s),p=o(i.x,i.y,i.angle-c,s);l.moveTo(i.x,a-i.y),l.lineTo(h.x,a-h.y),l.moveTo(i.x,a-i.y),l.lineTo(p.x,a-p.y),h.angle=i.angle+c,p.angle=i.angle-c,e.push(h),e.push(p)}s<10?l.strokeStyle="green":l.strokeStyle="brown",l.stroke(),m=e,s>2?setTimeout(n,50):setTimeout(t,500)}function o(e,t,n,o){var r=e+o*Math.cos(n*Math.PI/180),l=t+o*Math.sin(n*Math.PI/180);return{x:r,y:l}}var r=document.getElementById("canvas"),l=r.getContext("2d"),i=window.innerWidth,a=window.innerHeight;r.width=i,r.height=a;var s,c,d,u,m=[];t()}]),angular.module("NodeX").controller("FlashController",function(){}),angular.module("NodeX").controller("FunkUController",function(){function e(){drawVisual=requestAnimationFrame(e),n.getFloatTimeDomainData(d),i.fillStyle="rgb(255, 255, 255)",i.fillRect(0,0,a,s),i.lineWidth=1,i.strokeStyle="rgb(0, 0, 0)",i.beginPath();for(var t=2*Math.PI/c,o=0,r=0;r<c;r++){var l=s/3+250*d[r];i.strokeStyle="rgb("+255*.1.toString()+"0, 0, 0)",i.arc(a/2,s/2,l,o,o+t,!1),o+=t}i.stroke()}var t=new(window.AudioContext||window.webkitAudioContext||window.WebkitAudioContext),n=t.createAnalyser(),o=document.querySelector("#music"),r=t.createMediaElementSource(o),l=document.querySelector("#cvs1"),i=l.getContext("2d");r.connect(n),n.connect(t.destination);var a=l.width,s=l.height;n.fftSize=2048;var c=n.fftSize,d=new Float32Array(c);i.clearRect(0,0,a,s),e()}),angular.module("NodeX").controller("MainController",["$scope","$transitions","$state","$location",function(e,t,n,o){n.go("funku")}]),angular.module("NodeX").controller("NavbarController",["$state","$stateParams","$scope",function(e,t,n){n.msg="!",n.currentNavItem="page1"}]),angular.module("NodeX").controller("PaperController",function(){}),angular.module("NodeX").controller("UIController",["$scope",function(e){e.Array1=[1,2,3,4,5],e.Array2=["a","b","c","d","e"]}]).directive("svRoot",[function(){function e(e,t,n){return n?e.x-t.x<0:e.y-t.y<0}function t(e){return r[e]}function n(e){delete r[e]}var o,r=Object.create(null);return{restrict:"A",controller:["$scope","$attrs","$interpolate","$parse",function(l,i,a,s){var c=a(i.svRoot)(l)||l.$id;r[c]||(r[c]=[]);var d,u,m,h,p,v,f=!1,g=s(i.svOnSort);i.svOnStart=i.$$element[0].attributes["sv-on-start"],i.svOnStart=i.svOnStart&&i.svOnStart.value,i.svOnStop=i.$$element[0].attributes["sv-on-stop"],i.svOnStop=i.svOnStop&&i.svOnStop.value;var y=s(i.svOnStart),$=s(i.svOnStop);if(this.sortingInProgress=function(){return o},i.svGrid){if(f="true"===i.svGrid||"false"!==i.svGrid&&null,null===f)throw"Invalid value of sv-grid attribute"}else l.$watchCollection(function(){return t(c)},function(e){f=!1;var t=e.filter(function(e){return!e.container}).map(function(e){return{part:e.getPart().id,y:e.element[0].getBoundingClientRect().top}}),n=Object.create(null);t.forEach(function(e){n[e.part]?n[e.part].push(e.y):n[e.part]=[e.y]}),Object.keys(n).forEach(function(e){n[e].sort(),n[e].forEach(function(t,o){o<n[e].length-1&&t>0&&t===n[e][o+1]&&(f=!0)})})});this.$moveUpdate=function(n,r,i,a,s,g,$){var w=i[0].getBoundingClientRect();"element"===n.tolerance&&(r={x:~~(w.left+w.width/2),y:~~(w.top+w.height/2)}),o=!0,d=[],u||(s?(u=s.clone(),u.removeClass("ng-hide")):(u=a.clone(),u.addClass("sv-visibility-hidden"),u.addClass("sv-placeholder"),u.css({height:w.height+"px",width:w.width+"px"})),a.after(u),a.addClass("ng-hide"),p=a,m=n,h=i,y(l,{$helper:{element:h},$part:g.model(g.scope),$index:$,$item:g.model(g.scope)[$]}),l.$root&&l.$root.$$phase||l.$apply()),h[0].reposition({x:r.x+document.body.scrollLeft-r.offset.x*w.width,y:r.y+document.body.scrollTop-r.offset.y*w.height}),t(c).forEach(function(t,o){if(null==n.containment||elementMatchesSelector(t.element,n.containment)||elementMatchesSelector(t.element,n.containment+" *")){var l=t.element[0].getBoundingClientRect(),i={x:~~(l.left+l.width/2),y:~~(l.top+l.height/2)};t.container||!t.element[0].scrollHeight&&!t.element[0].scrollWidth||d.push({element:t.element,q:(i.x-r.x)*(i.x-r.x)+(i.y-r.y)*(i.y-r.y),view:t.getPart(),targetIndex:t.getIndex(),after:e(i,r,f)}),t.container&&!t.element[0].querySelector("[sv-element]:not(.sv-placeholder):not(.sv-source)")&&d.push({element:t.element,q:(i.x-r.x)*(i.x-r.x)+(i.y-r.y)*(i.y-r.y),view:t.getPart(),targetIndex:0,container:!0})}});var x=u[0].getBoundingClientRect(),b={x:~~(x.left+x.width/2),y:~~(x.top+x.height/2)};d.push({q:(b.x-r.x)*(b.x-r.x)+(b.y-r.y)*(b.y-r.y),element:u,placeholder:!0}),d.sort(function(e,t){return e.q-t.q}),d.forEach(function(e,t){0!==t||e.placeholder||e.container?0===t&&e.container?(v=e,e.element.append(u)):e.element.removeClass("sv-candidate"):(v=e,e.element.addClass("sv-candidate"),e.after?e.element.after(u):insertElementBefore(e.element,u))})},this.$drop=function(e,t,n){function r(){if(o=!1,u.remove(),h.remove(),p.removeClass("ng-hide"),d=void 0,u=void 0,n=void 0,h=void 0,p=void 0,$(l,{$part:e.model(e.scope),$index:t,$item:e.model(e.scope)[t]}),v){v.element.removeClass("sv-candidate");var r=e.model(e.scope).splice(t,1),i=v.targetIndex;v.view===e&&v.targetIndex>t&&i--,v.after&&i++,v.view.model(v.view.scope).splice(i,0,r[0]),v.view===e&&t===i||g(l,{$partTo:v.view.model(v.view.scope),$partFrom:e.model(e.scope),$item:r[0],$indexTo:i,$indexFrom:t})}v=void 0,l.$root&&l.$root.$$phase||l.$apply()}if(u)if(n.revert){var i=u[0].getBoundingClientRect(),a=h[0].getBoundingClientRect(),s=Math.sqrt(Math.pow(a.top-i.top,2)+Math.pow(a.left-i.left,2)),c=+n.revert*s/200;c=Math.min(c,+n.revert),["-webkit-","-moz-","-ms-","-o-",""].forEach(function(e){"undefined"!=typeof h[0].style[e+"transition"]&&(h[0].style[e+"transition"]="all "+c+"ms ease")}),setTimeout(r,c),h.css({top:i.top+document.body.scrollTop+"px",left:i.left+document.body.scrollLeft+"px"})}else r()},this.addToSortableElements=function(e){t(c).push(e)},this.removeFromSortableElements=function(e){var o=t(c),r=o.indexOf(e);r>-1&&(o.splice(r,1),0===o.length&&n(c))}}]}}]).directive("svPart",["$parse",function(e){return{restrict:"A",require:"^svRoot",controller:["$scope",function(e){e.$ctrl=this,this.getPart=function(){return e.part},this.$drop=function(t,n){e.$sortableRoot.$drop(e.part,t,n)}}],scope:!0,link:function(t,n,o,r){if(!o.svPart)throw new Error("no model provided");var l=e(o.svPart);if(!l.assign)throw new Error("model not assignable");t.part={id:t.$id,element:n,model:l,scope:t},t.$sortableRoot=r;var i={element:n,getPart:t.$ctrl.getPart,container:!0};r.addToSortableElements(i),t.$on("$destroy",function(){r.removeFromSortableElements(i)})}}}]).directive("svElement",["$parse",function(e){return{restrict:"A",require:["^svPart","^svRoot"],controller:["$scope",function(e){e.$ctrl=this}],link:function(t,n,o,r){function l(l){function i(e){touchFix(e),d||(n.parent().prepend(h),d=!0),r[1].$moveUpdate(a,{x:e.clientX,y:e.clientY,offset:f},h,n,c,r[0].getPart(),t.$index)}if(touchFix(l),!r[1].sortingInProgress()&&(0==l.button||"mousedown"!==l.type)){d=!1;var a=e(o.svElement)(t);if(a=angular.extend({},{tolerance:"pointer",revert:200,containment:"html"},a),a.containment)var m=closestElement.call(n,a.containment)[0].getBoundingClientRect();var h,p=n,v=n[0].getBoundingClientRect();s||(s=r[0].helper),c||(c=r[0].placeholder),s?(h=s.clone(),h.removeClass("ng-hide"),h.css({left:v.left+document.body.scrollLeft+"px",top:v.top+document.body.scrollTop+"px"}),p.addClass("sv-visibility-hidden")):(h=p.clone(),h.addClass("sv-helper").css({left:v.left+document.body.scrollLeft+"px",top:v.top+document.body.scrollTop+"px",width:v.width+"px"})),h[0].reposition=function(e){var t=e.x,n=e.y,o=h[0].getBoundingClientRect(),r=document.body;m&&(n<m.top+r.scrollTop&&(n=m.top+r.scrollTop),n+o.height>m.top+r.scrollTop+m.height&&(n=m.top+r.scrollTop+m.height-o.height),t<m.left+r.scrollLeft&&(t=m.left+r.scrollLeft),t+o.width>m.left+r.scrollLeft+m.width&&(t=m.left+r.scrollLeft+m.width-o.width)),this.style.left=t-r.scrollLeft+"px",this.style.top=n-r.scrollTop+"px"};var f={x:(l.clientX-v.left)/v.width,y:(l.clientY-v.top)/v.height};u.addClass("sv-sorting-in-progress"),u.on("mousemove touchmove",i).on("mouseup touchend touchcancel",function e(o){u.off("mousemove touchmove",i),u.off("mouseup touchend touchcancel",e),u.removeClass("sv-sorting-in-progress"),d&&r[0].$drop(t.$index,a),n.removeClass("sv-visibility-hidden")})}}var i={element:n,getPart:r[0].getPart,getIndex:function(){return t.$index}};r[1].addToSortableElements(i),t.$on("$destroy",function(){r[1].removeFromSortableElements(i)});var a=n;a.on("mousedown touchstart",l),t.$watch("$ctrl.handle",function(e){e&&(a.off("mousedown touchstart",l),a=e,a.on("mousedown touchstart",l))});var s;t.$watch("$ctrl.helper",function(e){e&&(s=e)});var c;t.$watch("$ctrl.placeholder",function(e){e&&(c=e)});var d,u=(angular.element(document.body),angular.element(document.documentElement))}}}]).directive("svHandle",function(){return{require:"?^svElement",link:function(e,t,n,o){o&&(o.handle=t.add(o.handle))}}}).directive("svHelper",function(){return{require:["?^svPart","?^svElement"],link:function(e,t,n,o){t.addClass("sv-helper").addClass("ng-hide"),o[1]?o[1].helper=t:o[0]&&(o[0].helper=t)}}}).directive("svPlaceholder",function(){return{require:["?^svPart","?^svElement"],link:function(e,t,n,o){t.addClass("sv-placeholder").addClass("ng-hide"),o[1]?o[1].placeholder=t:o[0]&&(o[0].placeholder=t)}}});var dde=document.documentElement,matchingFunction=dde.matches?"matches":dde.matchesSelector?"matchesSelector":dde.webkitMatches?"webkitMatches":dde.webkitMatchesSelector?"webkitMatchesSelector":dde.msMatches?"msMatches":dde.msMatchesSelector?"msMatchesSelector":dde.mozMatches?"mozMatches":dde.mozMatchesSelector?"mozMatchesSelector":null;if(null==matchingFunction)throw"This browser doesn't support the HTMLElement.matches method";var closestElement=angular.element.prototype.closest||function(e){for(var t=this[0].parentNode;t!==document.documentElement&&!t[matchingFunction](e);)t=t.parentNode;return t[matchingFunction](e)?angular.element(t):angular.element()};"function"!=typeof angular.element.prototype.add&&(angular.element.prototype.add=function(e){var t,n=angular.element();for(e=angular.element(e),t=0;t<this.length;t++)n.push(this[t]);for(t=0;t<e.length;t++)n.push(e[t]);return n});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
